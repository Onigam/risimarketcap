{"ast":null,"code":"import _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nvar _jsxFileName = \"/Users/magino/Dev/crypto-prices/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport withLayout from '../components/Layout';\nimport Link from 'next/link';\nimport mockData from '../data/currencies';\n\nconst renderCurrencyRow = currency => {\n  return __jsx(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, __jsx(\"th\", {\n    scope: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, currency.rank), __jsx(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, __jsx(Link, {\n    href: `/currencies/${currency.symbol}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, currency.name)), __jsx(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, _parseFloat(currency.market_cap).toFixed(2)), __jsx(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, _parseFloat(currency.price_usd).toFixed(3)), __jsx(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, _parseFloat(currency.volume_usd).toFixed(3)), __jsx(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, currency.available_supply), __jsx(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, _parseFloat(currency.price_change).toFixed(3)));\n};\n\nconst Page = () => {\n  const currencies = mockData.data;\n  return __jsx(\"table\", {\n    className: \"table\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, __jsx(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, __jsx(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, __jsx(\"th\", {\n    scope: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"#\"), __jsx(\"th\", {\n    scope: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"Name\"), __jsx(\"th\", {\n    scope: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Market Cap\"), __jsx(\"th\", {\n    scope: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Price USD\"), __jsx(\"th\", {\n    scope: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Volume (24h)\"), __jsx(\"th\", {\n    scope: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Available supply\"), __jsx(\"th\", {\n    scope: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Price change\"))), __jsx(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, currencies.map(renderCurrencyRow)));\n};\n\nexport default withLayout(Page);","map":{"version":3,"sources":["/Users/magino/Dev/crypto-prices/pages/index.js"],"names":["withLayout","Link","mockData","renderCurrencyRow","currency","rank","symbol","name","market_cap","toFixed","price_usd","volume_usd","available_supply","price_change","Page","currencies","data","map"],"mappings":";;;;AAAA,OAAOA,UAAP,MAAuB,sBAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,QAAP,MAAqB,oBAArB;;AAEA,MAAMC,iBAAiB,GAAIC,QAAD,IAAc;AACpC,SAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACJ;AAAI,IAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiBA,QAAQ,CAACC,IAA1B,CADI,EAEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAM,IAAA,IAAI,EAAG,eAAcD,QAAQ,CAACE,MAAO,EAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,QAAQ,CAACG,IADd,CADJ,CAFI,EAOJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,YAAWH,QAAQ,CAACI,UAApB,EAAgCC,OAAhC,CAAwC,CAAxC,CAAL,CAPI,EAQJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,YAAWL,QAAQ,CAACM,SAApB,EAA+BD,OAA/B,CAAuC,CAAvC,CAAL,CARI,EASJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,YAAWL,QAAQ,CAACO,UAApB,EAAgCF,OAAhC,CAAwC,CAAxC,CAAL,CATI,EAUJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKL,QAAQ,CAACQ,gBAAd,CAVI,EAWJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,YAAWR,QAAQ,CAACS,YAApB,EAAkCJ,OAAlC,CAA0C,CAA1C,CAAL,CAXI,CAAR;AAaH,CAdD;;AAgBA,MAAMK,IAAI,GAAG,MAAM;AACf,QAAMC,UAAU,GAAGb,QAAQ,CAACc,IAA5B;AAEA,SACI;AAAO,IAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAI,IAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADJ,EAEI;AAAI,IAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAGI;AAAI,IAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,EAII;AAAI,IAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJJ,EAKI;AAAI,IAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALJ,EAMI;AAAI,IAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBANJ,EAOI;AAAI,IAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPJ,CADA,CADJ,EAYI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,UAAU,CAACE,GAAX,CAAed,iBAAf,CADL,CAZJ,CADJ;AAkBH,CArBD;;AAuBA,eAAeH,UAAU,CAACc,IAAD,CAAzB","sourcesContent":["import withLayout from '../components/Layout';\nimport Link from 'next/link';\nimport mockData from '../data/currencies';\n\nconst renderCurrencyRow = (currency) => {\n    return (<tr>\n        <th scope=\"row\">{currency.rank}</th>\n        <td>\n            <Link href={`/currencies/${currency.symbol}`}>\n                {currency.name}\n            </Link>\n        </td>\n        <td>{parseFloat(currency.market_cap).toFixed(2)}</td>\n        <td>{parseFloat(currency.price_usd).toFixed(3)}</td>\n        <td>{parseFloat(currency.volume_usd).toFixed(3)}</td>\n        <td>{currency.available_supply}</td>\n        <td>{parseFloat(currency.price_change).toFixed(3)}</td>\n    </tr>);\n};\n\nconst Page = () => {\n    const currencies = mockData.data;\n\n    return (\n        <table className=\"table\">\n            <thead>\n            <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Market Cap</th>\n                <th scope=\"col\">Price USD</th>\n                <th scope=\"col\">Volume (24h)</th>\n                <th scope=\"col\">Available supply</th>\n                <th scope=\"col\">Price change</th>\n            </tr>\n            </thead>\n            <tbody>\n                {currencies.map(renderCurrencyRow)}\n            </tbody>\n        </table>\n    );\n}\n\nexport default withLayout(Page);\n"]},"metadata":{},"sourceType":"module"}